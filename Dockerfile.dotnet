# Multi-stage Dockerfile for .NET Blazor Application

# Stage 1: Build stage with .NET 9 SDK
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build-stage

# Set working directory
WORKDIR /app

# Copy solution file and project files
COPY dotnet/ContosoWebApp.sln .
COPY dotnet/Contoso.BlazorApp/Contoso.BlazorApp.csproj ./Contoso.BlazorApp/

# Restore dependencies (this layer will be cached if dependencies don't change)
RUN dotnet restore

# Copy source code
COPY dotnet/Contoso.BlazorApp/ ./Contoso.BlazorApp/

# Build and publish the application
RUN dotnet publish Contoso.BlazorApp/Contoso.BlazorApp.csproj \
    -c Release \
    -o /app/publish \
    --no-restore

# Stage 2: Runtime stage with .NET 9 ASP.NET runtime
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime-stage

# Install curl for health checks
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy published application from build stage
COPY --from=build-stage /app/publish .

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Environment variable for API base URL
ENV ApiSettings__BaseUrl=http://localhost:8080/api

# Expose port 8080
EXPOSE 8080

# Configure ASP.NET Core to use port 8080
ENV ASPNETCORE_URLS=http://+:8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/ || exit 1

# Run the application
ENTRYPOINT ["dotnet", "Contoso.BlazorApp.dll"]
